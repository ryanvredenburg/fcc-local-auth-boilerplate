{"/app/app/config/passport.js":{"size":4372,"mtime":1504442569587,"hashOfConfig":"u71bin","results":{"filePath":"/app/app/config/passport.js","messages":[],"errorCount":0,"warningCount":0,"output":"'use strict'\n\n// load all the things we need\nvar LocalStrategy = require('passport-local').Strategy\n\n// load up the user model\nvar User = require('../models/users')\n\n// expose this function to our app using module.exports\nmodule.exports = function (passport) {\n    // =========================================================================\n    // passport session setup ==================================================\n    // =========================================================================\n    // required for persistent login sessions\n    // passport needs ability to serialize and unserialize users out of session\n\n    // used to serialize the user for the session\n  passport.serializeUser(function (user, done) {\n    done(null, user.id)\n  })\n\n    // used to deserialize the user\n  passport.deserializeUser(function (id, done) {\n    User.findById(id, function (err, user) {\n      done(err, user)\n    })\n  })\n\n  passport.use('local-signup', new LocalStrategy({\n        // by default, local strategy uses username and password, we will override with email\n    usernameField: 'email',\n    passwordField: 'password',\n    passReqToCallback: true // allows us to pass back the entire request to the callback\n  },\n    function (req, email, password, done) {\n      console.log('passport auth begin')\n        // asynchronous\n        // User.findOne wont fire unless data is sent back\n      process.nextTick(function () {\n        // find a user whose email is the same as the forms email\n        // we are checking to see if the user trying to login already exists\n        User.findOne({ 'local.email': email }, function (err, user) {\n            // if there are any errors, return the error\n          if (err) {\n            console.log(err)\n            return done(err)\n          }\n\n            // check to see if theres already a user with that email\n          if (user) {\n            console.log('passport user already existed')\n            return done(null, false, req.flash('signupMessage', 'That email is already taken.'))\n          } else {\n            console.log('passport user create begin')\n                // if there is no user with that email\n                // create the user\n            var newUser = new User()\n\n                // set the user's local credentials\n            newUser.local.email = email\n            newUser.local.password = newUser.generateHash(password)\n\n                // save the user\n            newUser.save(function (err) {\n              if (err) { throw err }\n              return done(null, newUser)\n            })\n          }\n        })\n      })\n    }))\n  // =========================================================================\n    // LOCAL LOGIN =============================================================\n    // =========================================================================\n    // we are using named strategies since we have one for login and one for signup\n    // by default, if there was no name, it would just be called 'local'\n\n  passport.use('local-login', new LocalStrategy({\n        // by default, local strategy uses username and password, we will override with email\n    usernameField: 'email',\n    passwordField: 'password',\n    passReqToCallback: true // allows us to pass back the entire request to the callback\n  },\n    function (req, email, password, done) { // callback with email and password from our form\n        // find a user whose email is the same as the forms email\n        // we are checking to see if the user trying to login already exists\n      User.findOne({ 'local.email': email }, function (err, user) {\n            // if there are any errors, return the error before anything else\n        if (err) { return done(err) }\n\n            // if no user is found, return the message\n        if (!user) { return done(null, false, req.flash('loginMessage', 'No user found.')) } // req.flash is the way to set flashdata using connect-flash\n\n            // if the user is found but the password is wrong\n        if (!user.validPassword(password)) { return done(null, false, req.flash('loginMessage', 'Oops! Wrong password.')) } // create the loginMessage and save it to session as flashdata\n\n            // all is well, return successful user\n        return done(null, user)\n      })\n    }))\n}\n"}},"/app/app/models/users.js":{"size":696,"mtime":1504442311286,"hashOfConfig":"u71bin","results":{"filePath":"/app/app/models/users.js","messages":[],"errorCount":0,"warningCount":0}}}